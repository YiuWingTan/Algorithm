/*

1200：分解因数

时间限制: 1000 ms         内存限制: 65536 KB
提交数: 5107     通过数: 2865
【题目描述】
给出一个正整数a，要求分解成若干个正整数的乘积，即a=a1×a2×a3×...×an，并且1<a1≤a2≤a3≤...≤an，问这样的分解的种数有多少。注意到a=a也是一种分解。

【输入】
第1行是测试数据的组数n，后面跟着n行输入。每组测试数据占1行，包括一个正整数a(1<a<32768)。

【输出】
n行，每行输出对应一个输入。输出应是一个正整数，指明满足要求的分解的种数。

【输入样例】
2
2
20
【输出样例】
1
4



【算法分析】


我们考虑一个数的最长的乘积

20 = 2*2*5
使用普通的递归求解的话，答案是有重复计数的问题存在的。我们可以分析出一个数的所有因数乘积的种类就是将最长的因数乘积中的因子进行一个组合+1。
例如，20的所有因数乘积为上面2*2*5中数的组合例如，2*10，4*5。

所有为了防止重复计数，我们可以从2开始那么剩下的数为N/2，而剩下的N/2又可以被因数分解，但是要注意因数分析的最小值一定》=2.通过这样来进行考虑的话，我们可以设置一个函数f(n,m)
表示从最小值n开始去寻找m的所有因数乘积的个数。
*/



#include<iostream>

using namespace std;

int a[32768];

int sum;


void count(int n,int m)
{

	for (int i = n; i <= m; i++)
	{
		if (m%i == 0 && i <= m / i)
		{
			sum++;
			count(i,m/i);
		}

		if (m / i < i) break;

	}

}


int main()
{
	int n;
	cin >> n;


	for (int i = 0; i < n; i++)
		cin>>a[i];

	
	for (int i = 0; i < n; i++)
	{
		sum = 1;
		count(2, a[i]);
		cout << sum << endl;
	}



	return 0;
}



